@model PagedList.IPagedList<GTDoro.Models.Action>
@using PagedList.Mvc;
@using GTDoro.ExtensionMethods;

@{
    ViewBag.Title = "Workspace";
    ViewBag.SubNavTitle = "Actions";
    ViewBag.Operation = GTDoro.Models.Operation.ActionList;
    string[] tagFilter = ViewBag.TagFilter;
    bool Isfiltered = (ViewBag.IsFiltered ?? false);
    RouteValueDictionary dict = ViewBag.RouteFiltersForPagination;
}
<div class="box box-success">
    <div class="box-header">
        <h3 class="box-title"><i class="fa fa-fw fa-circle"></i> Action List</h3>
        <div class="box-tools pull-right">
            <button class="btn btn-default btn-sm" data-toggle="tooltip" title="Toggle Filters" onclick="$('#filter-bars-container').slideToggle()">
                <i class="fa fa-fw fa-filter"></i> Filters</button>
        </div>
    </div><!-- /.box-header -->
    <div class="box-body">
        <div id="filter-bars-container" style="display: @(Isfiltered ? "block" : "none")">
            @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "filter" }))
            {
                @Html.Hidden("filtering", Isfiltered ? "1" : string.Empty)
                <div class="row">
                    <div class="col-xs-6">
                        @Html.Partial("Panels/Filters/_StatusFilter")
                    </div>
                    <div class="col-xs-6">
                        @Html.Partial("Panels/Filters/_PriorityFilter")
                    </div>
                </div>
                <div>                    
                    @{ViewBag.Mode = GTDoro.Models.FilterBarMode.Filter; }
                    @Html.Partial("Panels/Filters/_TagFilter")
                </div>
            }
        </div>
    </div>
    
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th class="checkbox-col"></th>
                    <th>@Html.ActionLink("Action", "Index", new { sortOrder = ViewBag.ActionSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th class="hidden-xxs">@Html.ActionLink("Task", "Index", new { sortOrder = ViewBag.TaskSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th class="hidden-xs">@Html.ActionLink("Project", "Index", new { sortOrder = ViewBag.ProjectSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th class="hidden-xs hidden-sm hidden-md">@Html.ActionLink("Deadline/End", "Index", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th><a href="@Url.Action("Index", "Action", new { sortOrder = ViewBag.StatusSortParm, currentFilter = ViewBag.CurrentFilter })"><i class="fa fa-spinner" title="Status"></i></a></th>
                    <th class="hidden-xs"><a href="@Url.Action("Index", "Action", new { sortOrder = ViewBag.PrioritySortParm, currentFilter = ViewBag.CurrentFilter })"><i class="fa fa-arrows-v" title="Priority"></i></a></th>
                    <th class="hidden-xs hidden-sm hidden-md">@Html.ActionLink("Last Work", "Index", new { sortOrder = ViewBag.LastPomodoroSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th class="hidden-3xs"><a href="@Url.Action("Index", "Action", new { sortOrder = ViewBag.PomodorosSortParm, currentFilter = ViewBag.CurrentFilter })"><i class="fa fa-wrench" title="Work units"></i></a></th>
                    <th class="hidden-xxs"><a href="@Url.Action("Index", "Action", new { sortOrder = ViewBag.EstimateSortParm, currentFilter = ViewBag.CurrentFilter })"><i class="fa fa-question" title="Estimate"></i></a></th>
                    <th class="hidden-xs">@Html.ActionLink("Effort", "Index", new { sortOrder = ViewBag.EffortSortParm, currentFilter = ViewBag.CurrentFilter })</th>
                    <th class="hidden-3xs"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td class="checkbox-col">
                            <input type="checkbox" name="selectedActions" value="@item.ID" />
                        </td>
                        <td>
                            <span class="limited-size-column">@Html.ActionLink(item.Name, "Details", "Action", new { id = item.ID }, new { @class = item.CssClass, @title = item.Name })</span>
                        </td>
                        <td class="hidden-xxs">
                            @Html.ActionLink(item.Task.Code, "Details", "Task", new { id = item.Task.ID }, new { @class = item.Task.CssClass })
                        </td>
                        <td class="hidden-xs">
                            @Html.ActionLink(item.Task.Project.Code, "Details", "Project", new { id = item.Task.Project.ID }, new { @class = item.Task.Project.CssClass })
                        </td>
                        <td class="hidden-xs hidden-sm hidden-md">
                            @Html.Raw(item.GetDeadlineOrEndDateIconHtmlTag() + " "
                            + (item.DeadlineOrEndDate.HasValue ? item.DeadlineOrEndDate.ToRelativeString() : string.Empty))
                        </td>
                        <td>
                            @Html.Raw(item.StatusIconHtml)
                        </td>
                        <td class="hidden-xs">
                            @Html.Raw(item.Priority.GetIconHtmlTag())
                        </td>
                        <td class="hidden-xs hidden-sm hidden-md" data-order="@(item.LastPomodoro.ToDateTicksOrZero())" title="@(item.LastPomodoro.ToDateStringOrEmpty())">
                            <i class="fa fa-fw fa-clock-o"></i> @(item.LastPomodoro.ToDateRelativeString())
                        </td>
                        <td class="hidden-3xs">
                            @Html.DisplayFor(modelItem => item.CompletedPomodorosCount)
                        </td>
                        <td class="hidden-xxs">
                            @{if (item.IsPersistent)
                            {
                                <i class="fa fa-fw fa-refresh" title="Recurrent Action"></i>
                            }
                            else
                            {
                                @(item.Estimate >= 0 ? item.Estimate : null)
                            }
                            }
                        </td>
                        <td class="hidden-xs" title="@(item.EffortInfo)">
                            <span class="badge @(item.EffortGroup.GetAttributeIconCssClass())">
                                @(String.IsNullOrWhiteSpace(item.Effort.ToIntegerPercentageString()) ?
                        item.CompletedPomodorosCount.ToString() : item.Effort.ToIntegerPercentageString())
                            </span>
                        </td>
                        <td class="hidden-3xs operations-cell">
                            <a href="@Url.Action("Edit", "Action", new { id = item.ID })"><i class="fa fa-fw fa-edit gt-operation" title="Edit"></i></a>
                            <a href="@Url.Action("Delete", "Action", new { id = item.ID })"><i class="fa fa-fw fa-times gt-operation" title="Delete"></i></a>
                            @if (item.IsSelectable && item.Task.Project.User.ActionID != item.ID)
                            {
                                @*<a href="@Url.Action("Planify", "Action", new { id = item.ID })"><i class="fa fa-fw fa-calendar gt-operation" title="Planify"></i></a>*@
                                <a href="@Url.Action("Select", "Action", new { id = item.ID })"><i class="fa fa-fw fa-play gt-operation" title="Select"></i></a>
                            }
                            @if (item.IsActive)
                            {
                                <a href="@Url.Action("ChangeStatus", item.Type.ToString(), new { id = item.Ident, status = GTDoro.Models.Status.Completed })"><i class="fa fa-fw fa-check-square-o gt-operation" title="Complete"></i></a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div id="multiple-edit-bars-container" class="box-body" style="display:none">
        <div>
            @{ViewBag.Mode = GTDoro.Models.FilterBarMode.MultipleEdit; }
            @Html.Partial("Panels/Filters/_TagFilter")
        </div>
        <div class="form-horizontal">
            <div class="col-sm-5">
                <div class="form-group">
                    <label class="col-xs-5 control-label" for="newstatus">Change status to</label>
                    <span class="col-xs-7">
                        @Html.DropDownList("NewStatus", EnumHelper.GetSelectList(typeof(GTDoro.Models.Status)), "(No change)", new { @class = "form-control" })
                    </span>
                </div>
            </div>
            <div class="col-sm-5">
                <div class="form-group">
                    <label class="col-xs-5 control-label" for="NewPriority">Change priority to</label>
                    <span class="col-xs-7">
                        @Html.DropDownList("NewPriority", EnumHelper.GetSelectList(typeof(GTDoro.Models.LevelExtended)), "(No change)", new { @class = "form-control" })
                    </span>
                </div>
            </div>
            <div class="col-xs-3 col-sm-2">
                <div class="form-group">
                    <button class="btn btn-primary" type="submit"><i class="fa fa-fw fa-save"></i> Modify Selected</button>
                </div>
            </div>
        </div>
    </div>
    }
<div class="box-body clear">
    <span>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</span>
    <div class="box-tools pull-right">
        <button class="btn btn-default btn-sm" data-toggle="tooltip" title="Toggle Multiple Edit" onclick="toggleEditMode()"><i class="fa fa-fw fa-files-o"></i> Multiple edit</button>
    </div>

    @Html.PagedListPager(Model, page => Url.Action("Index",
        dict.AddKeyValueToRouteValueDictionary("Page", page.ToString())))

</div>
<script type="text/javascript">
    $('#filter-bars-container .inline-checkbox input').on('ifToggled', function (event) {
        $('form.filter').submit();
    })
    function toggleEditMode() {
        $('#multiple-edit-bars-container').slideToggle();
        $('.checkbox-col .icheckbox_minimal').toggle();
    }
</script>