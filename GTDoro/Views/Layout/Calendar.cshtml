@model CalendarViewModel
@using GTDoro.ViewModels;
@using System.Drawing;
@{
    ViewBag.Title = "Calendar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- fullCalendar -->
@Styles.Render("~/Content/fullcalendar")
@{
    var cssMediaBundleUrl = BundleTable.Bundles.ResolveBundleUrl("~/Content/fullcalendar-print", true);
}
<link href="@cssMediaBundleUrl" rel="stylesheet" type="text/css" media="print" />
@Scripts.Render("~/Scripts/fullcalendar")

<div id="eventContent" title="Event Details" style="display:none;">    
    <p id="actionInfo"></p>
    <p id="taskInfo"></p>
    <p id="projectInfo"></p>
    Start: <span id="startTime"></span><br>
    End: <span id="endTime"></span><br><br>
    <p><strong><a id="eventLink" href="" target="_blank">Read More</a></strong></p>
</div>

<div class="box box-warning">
    <div class="box-body no-padding">
        <!-- THE CALENDAR -->
        <div id="calendar-full"></div>
    </div><!-- /.box-body -->
</div><!-- /. box -->
<!-- fullCalendar -->
<script>
    //Calendar
    $('#calendar-full').fullCalendar({
        eventRender: function (event, element) {
            element.attr('id', 'pomid-' + event.pomid + '-actid-' + event.actid);
            element.attr('title', '(P): ' + event.project + ' - (T): ' + event.task);
        },
        disableDragging: true,
        disableResizing: true,
        firstDay: 1,
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
        },
        @Html.Raw(Model.LastDateParams)
        events: [
             @{
                 Color projectColor;
                 Color taskColor;
                 Color fontColor;
                 DateTime start;

                 Dictionary<int, Color> dictProjects = Model.DictProjectColors;
                 Dictionary<int, Color> dictTasks = Model.DictTaskColors;

                 List<GTDoro.Models.Pomodoro> lst = Model.WorkHistory.ToList();

                 foreach (GTDoro.Models.Pomodoro item in lst)
                 {
                     projectColor = dictProjects[item.Action.Task.ProjectID];
                     taskColor = dictTasks[item.Action.TaskID];
                     fontColor = CalendarViewModel.DetermineFontColor(projectColor);
                     start = item.StartLocal.Value;
                    @("{")
                    @Html.Raw("title: '" + item.Action.Name.Replace("ó", "o").Replace("'", "") + "',")
                    @Html.Raw("start: new Date(" + start.Year + ", " + (start.Month - 1) + ", " + start.Day + ", " +
                        start.Hour + ", " + start.Minute + "),")
                     DateTime endDateTime = start.AddMinutes(GTDoro.Models.Settings.POMOCYCLE);
                     if(endDateTime.Date != start.Date)
                     {
                         endDateTime = new DateTime(start.Date.Year, start.Date.Month, start.Date.Day, 23, 59, 59);
                     }
                    @Html.Raw("end: new Date(" + endDateTime.Year + ", " + (endDateTime.Month - 1) + ", " + endDateTime.Day + ", " +
                        endDateTime.Hour + ", " + endDateTime.Minute + "),");
                    @Html.Raw("allDay: false,");
                    @Html.Raw("pomid: '" + item.ID + "',");
                    @Html.Raw("actid: '" + item.ActionID + "',");
                    @Html.Raw("project: '" + item.Action.Task.Project.ItemName + "',");
                    @Html.Raw("task: '" + item.Action.Task.ItemName + "',");
                    @Html.Raw("className:'calendar-action " + (fontColor == Color.Black ? "font-black" : "font-white") + "',");
                    @Html.Raw("url: '" + Url.Action("Details", "Action", new { id = item.ActionID }) + "',")
                    @Html.Raw("backgroundColor: \"" + CalendarViewModel.GetColorRGB(projectColor) + "\", ")
                    @Html.Raw("borderColor: \"" + CalendarViewModel.GetColorRGB(taskColor) + "\", ")
                    @Html.Raw("textColor: \"" + CalendarViewModel.GetColorRGB(CalendarViewModel.DetermineFontColor(projectColor)) + "\", ")
                    @("\r\n},")
                }
            }
        ],
        buttonText: {//This is to add icons to the visible buttons
            prev: "<span class='fa fa-caret-left'></span>",
            next: "<span class='fa fa-caret-right'></span>",
            today: 'today',
            month: 'month',
            week: 'week',
            day: 'day'
        },
        eventAfterAllRender: function (view) {
            calendarColorbox();
        }
    });

    function calendarColorbox() {
        $(".calendar-action").colorbox({
            width: "100%",
            maxWidth: "900px",
            href: function () {
                return "Action/LightDetails/" + this.id.replace(/.+actid-/, '');
            },
            onComplete: function () {
                $(this).colorbox.resize();
            }
        });
    }
    calendarColorbox();

</script>